uint32_t curveNumPts = 22; // no of control points 

//Coordinates of curve points
Vec3f curveData[curveNumPts] = { 
    {-0.0029370324, 0.0297554422, 0}, 
    {-0.1556627219, 0.3293327560, 0}, 
    {-0.2613958914, 0.9578577085, 0}, 
    {-0.2555218265, 1.3044275420, 0}, 
    {-0.2496477615, 1.6509973760, 0}, 
    {-0.1262923970, 2.0445597290, 0}, 
    { 0.1791589818, 2.2853963930, 0}, 
    { 0.4846103605, 2.5262330570, 0}, 
    { 0.9427874287, 2.2560260680, 0}, 
    { 1.0132762080, 1.9212043650, 0}, 
    { 1.0837649880, 1.5863826610, 0}, 
    { 0.9369133637, 1.2750572170, 0}, 
    { 0.6667063748, 1.2691831520, 0}, 
    { 0.3964993859, 1.2633090870, 0}, 
    { 0.2320255666, 1.3514200620, 0}, 
    { 0.1850330468, 1.5276420110, 0}, 
    { 0.1380405269, 1.7038639600, 0}, 
    { 0.2026552417, 1.8918340400, 0}, 
    { 0.4082475158, 1.9564487540, 0}, 
    { 0.6138397900, 2.0210634690, 0}, 
    { 0.7606914144, 1.8800859100, 0}, 
    { 0.7606914144, 1.7038639600, 0} 
}; 


Vec3f evalBezierCurve(const Vec3f *P, const float &t) 
{ 
    float b0 = (1 - t) * (1 - t) * (1 - t); 
    float b1 = 3 * t * (1 - t) * (1 - t); 
    float b2 = 3 * t * t * (1 - t); 
    float b3 = t * t * t; 
 
    return P[0] * b0 + P[1] * b1 + P[2] * b2 + P[3] * b3; 
} 
 
Vec3f evalBezierPatch(const Vec3f *controlPoints, const float &u, const float &v) 
{ 
    Vec3f uCurve[4]; 
    for (int i = 0; i < 4; ++i) 
        uCurve[i] = evalBezierCurve(controlPoints + 4 * i, u); 
 
    return evalBezierCurve(uCurve, v); 
} 
 
Vec3f derivBezier(const Vec3f *P, const float &t) 
{ 
    return -3 * (1 - t) * (1 - t) * P[0] + 
        (3 * (1 - t) * (1 - t) - 6 * t * (1 - t)) * P[1] + 
        (6 * t * (1 - t) - 3 * t * t) * P[2] + 
        3 * t * t * P[3]; 
} 

void createCurveGeometry(std::vector<std::unique_ptr<Object>> &objects) 
{ 
	//resolution of bezier curve
    uint32_t ndivs = 16; 
    
    // Number of bezier curvers joined to make a curve
    uint32_t ncurves = 1 + (curveNumPts - 4) / 3; 
    
    //define 4 3D vectors
    Vec3f pts[4]; 
    
    std::unique_ptr<Vec3f []> P(new Vec3f[(ndivs + 1) * ndivs * ncurves + 1]); 
    std::unique_ptr<Vec3f []> N(new Vec3f[(ndivs + 1) * ndivs * ncurves + 1]); 
    std::unique_ptr<Vec2f []> st(new Vec2f[(ndivs + 1) * ndivs * ncurves + 1]); 
    
    for (uint32_t i = 0; i < ncurves; ++i) { 
        for (uint32_t j = 0; j < ndivs; ++j) { 
            
            //All 4 points of a curve
            pts[0] = curveData[i * 3]; 
            pts[1] = curveData[i * 3 + 1]; 
            pts[2] = curveData[i * 3 + 2]; 
            pts[3] = curveData[i * 3 + 3]; 
            
            //define the step
            float s = j / (float)ndivs;
            
            //evaluate the bezier curve to create curve points at that step
            Vec3f pt = evalBezierCurve(pts, s);
            
            //evaluate the tangent to generate the tangents at these points got it by 
            //differentiation of above points
            Vec3f tangent = derivBezier(pts, s).normalize(); 
            
            
            
            //Now we create a local coordinate system to generate a loop of vertices
            //In order to create a loop of points(perpendicular to our tangent)
            // that will become the vertices of our thin cylinder.
            bool swap = false; 
 
            uint8_t maxAxis; 
            
            //we find which of the tangent coordinates has highest value.
            if (std::abs(tangent.x) > std::abs(tangent.y)) 
                if (std::abs(tangent.x) > std::abs(tangent.z)) 
                //highest tangent is x
                    maxAxis = 0; 
                else 
                //highest tangent is z
                    maxAxis = 2; 
            else if (std::abs(tangent.y) > std::abs(tangent.z)) 
            //highest tangent is y
                    maxAxis = 1; 
            else 
                maxAxis = 2; 
 
            Vec3f up, forward, right; 
 
            switch (maxAxis) { 
                case 0: 
                case 1: 
                    up = tangent; p
                    forward = Vec3f(0, 0, 1); 
                    right = up.crossProduct(forward); 
                    forward = right.crossProduct(up); 
                    break; 
                case 2: 
                    up = tangent; 
                    right = Vec3f(0, 0, 1); 
                    forward = right.crossProduct(up); 
                    right = up.crossProduct(forward); 
                    break; 
                default: 
                    break; 
            }; 
 
 
 
 
 
 		//Generate a loop of vertices
 		
 		//we want the cylinders to get thinner as we get closer to tip of curve.
            float sNormalized = (i * ndivs + j) / float(ndivs * ncurves);
             
            float rad = 0.1 * (1 - sNormalized); 
            
            for (uint32_t k = 0; k <= ndivs; ++k) {
             
                float t = k / (float)ndivs; 
                float theta = t * 2 * M_PI; 
                //get points of circle at each step
                Vec3f pc(cos(theta) * rad, 0, sin(theta) * rad); 
                
                float x = pc.x * right.x + pc.y * up.x + pc.z * forward.x; 
                float y = pc.x * right.y + pc.y * up.y + pc.z * forward.y; 
                float z = pc.x * right.z + pc.y * up.z + pc.z * forward.z; 
                
                //translate the points accordingly
                P[i * (ndivs + 1) * ndivs + j * (ndivs + 1) + k] = Vec3f(pt.x + x, pt.y + y, pt.z + z); 
                N[i * (ndivs + 1) * ndivs + j * (ndivs + 1) + k] = Vec3f(x, y, z).normalize(); 
                st[i * (ndivs + 1) * ndivs + j * (ndivs + 1) + k] = Vec2f(sNormalized, t); 
            } 
        } 
    } 
    
    //Meshing
    
    P[(ndivs + 1) * ndivs * ncurves] = curveData[curveNumPts - 1]; 
    N[(ndivs + 1) * ndivs * ncurves] = (curveData[curveNumPts - 2] - curveData[curveNumPts - 1]).normalize(); 
    st[(ndivs + 1) * ndivs * ncurves] = Vec2f(1, 0.5); 
    
    
    uint32_t numFaces = ndivs * ndivs * ncurves; 
    
    std::unique_ptr<uint32_t []> verts(new uint32_t[numFaces]); 
    
    for (uint32_t i = 0; i < numFaces; ++i) 
        verts[i] = (i < (numFaces - ndivs)) ? 4 : 3; 
    std::unique_ptr<uint32_t []> vertIndices(new uint32_t[ndivs * ndivs * ncurves * 4 + ndivs * 3]); 
    
    uint32_t nf = 0, ix = 0; 
    
    for (uint32_t k = 0; k < ncurves; ++k) { 
        for (uint32_t j = 0; j < ndivs; ++j) { 
            
            if (k == (ncurves - 1) && j == (ndivs - 1)) { break; } 
            
            for (uint32_t i = 0; i < ndivs; ++i) { 
                vertIndices[ix] = nf; 
                vertIndices[ix + 1] = nf + (ndivs + 1); 
                vertIndices[ix + 2] = nf + (ndivs + 1) + 1; 
                vertIndices[ix + 3] = nf + 1; 
                ix += 4; 
                ++nf; 
            } 
            nf++; 
        } 
    } 
 
    for (uint32_t i = 0; i < ndivs; ++i) { 
        vertIndices[ix] = nf; 
        vertIndices[ix + 1] = (ndivs + 1) * ndivs * ncurves; 
        vertIndices[ix + 2] = nf + 1; 
        ix += 3; 
        nf++; 
    } 
 
    objects.push_back(std::unique_ptr<TriangleMesh>(new TriangleMesh(Matrix44f::kIdentity, numFaces, verts, vertIndices, P, N, st))); 
} 
 
